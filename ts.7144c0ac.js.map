{"mappings":"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","sources":["./Users/zubairbashir/Documents/digital-data-encoder/node_modules/@parcel/scope-hoisting/lib/helpers.js","./node_modules/@parcel/runtime-js/lib/bundle-manifest.js","./node_modules/@parcel/runtime-js/lib/JSRuntime.js","./src/ts/components/CustomElement/CustomElement.ts","./src/ts/components/common/appConstants.ts","./node_modules/@parcel/runtime-js/lib/bundles/beb5e3b74526fb58d85821b0cd9d9181.js","./src/ts/components/AppWrapper/AppWrapper.ts","./node_modules/@parcel/runtime-js/lib/bundles/ad95bcdb42900912992996e69229b4b0.js","./node_modules/@parcel/runtime-js/lib/bundles/1e76d830d01d77bf32a0bba4578904e7.js","./node_modules/@parcel/runtime-js/lib/bundles/391d00fa637a38649745ef283db97f8c.js"],"sourcesContent":[null,"\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _plugin = require(\"@parcel/plugin\");\n\nvar _utils = require(\"@parcel/utils\");\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _nullthrows = _interopRequireDefault(require(\"nullthrows\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// List of browsers that support dynamic import natively\n// https://caniuse.com/#feat=es6-module-dynamic-import\nconst DYNAMIC_IMPORT_BROWSERS = {\n  edge: '76',\n  firefox: '67',\n  chrome: '63',\n  safari: '11.1',\n  opera: '50'\n};\nconst LOADERS = {\n  browser: {\n    css: './loaders/browser/css-loader',\n    html: './loaders/browser/html-loader',\n    js: './loaders/browser/js-loader',\n    wasm: './loaders/browser/wasm-loader',\n    IMPORT_POLYFILL: './loaders/browser/import-polyfill'\n  },\n  worker: {\n    js: './loaders/worker/js-loader',\n    wasm: './loaders/worker/wasm-loader',\n    IMPORT_POLYFILL: false\n  },\n  node: {\n    css: './loaders/node/css-loader',\n    html: './loaders/node/html-loader',\n    js: './loaders/node/js-loader',\n    wasm: './loaders/node/wasm-loader',\n    IMPORT_POLYFILL: null\n  }\n};\n\nfunction getLoaders(ctx) {\n  if (ctx.isWorker()) return LOADERS.worker;\n  if (ctx.isBrowser()) return LOADERS.browser;\n  if (ctx.isNode()) return LOADERS.node;\n  return null;\n}\n\nvar _default = new _plugin.Runtime({\n  apply({\n    bundle,\n    bundleGraph,\n    options\n  }) {\n    // Dependency ids in code replaced with referenced bundle names\n    // Loader runtime added for bundle groups that don't have a native loader (e.g. HTML/CSS/Worker - isURL?),\n    // and which are not loaded by a parent bundle.\n    // Loaders also added for modules that were moved to a separate bundle because they are a different type\n    // (e.g. WASM, HTML). These should be preloaded prior to the bundle being executed. Replace the entry asset(s)\n    // with the preload module.\n    if (bundle.type !== 'js') {\n      return;\n    }\n\n    let asyncDependencies = [];\n    let otherDependencies = [];\n    bundle.traverse(node => {\n      if (node.type !== 'dependency') {\n        return;\n      }\n\n      let dependency = node.value;\n\n      if (dependency.isAsync && !dependency.isURL) {\n        asyncDependencies.push(dependency);\n      } else {\n        otherDependencies.push(dependency);\n      }\n    });\n    let assets = [];\n\n    for (let dependency of asyncDependencies) {\n      let resolved = bundleGraph.resolveExternalDependency(dependency, bundle);\n\n      if (resolved == null) {\n        continue;\n      }\n\n      if (resolved.type === 'asset') {\n        // If this bundle already has the asset this dependency references,\n        // return a simple runtime of `Promise.resolve(require(\"path/to/asset\"))`.\n        assets.push({\n          filePath: _path.default.join(options.projectRoot, 'JSRuntime.js'),\n          // Using Promise['resolve'] to prevent Parcel from inferring this is an async dependency.\n          // TODO: Find a better way of doing this.\n          code: `module.exports = Promise['resolve'](require(${JSON.stringify('./' + _path.default.relative(options.projectRoot, resolved.value.filePath))}))`,\n          dependency\n        });\n      } else {\n        assets.push(...getLoaderRuntimes({\n          bundle,\n          dependency,\n          bundleGraph,\n          bundleGroup: resolved.value\n        }));\n      }\n    }\n\n    for (let dependency of otherDependencies) {\n      let resolved = bundleGraph.resolveExternalDependency(dependency, bundle);\n\n      if (dependency.isURL && resolved == null) {\n        // If a URL dependency was not able to be resolved, add a runtime that\n        // exports the original moduleSpecifier.\n        assets.push({\n          filePath: __filename,\n          code: `module.exports = ${JSON.stringify(dependency.moduleSpecifier)}`,\n          dependency\n        });\n        continue;\n      }\n\n      if (resolved == null || resolved.type !== 'bundle_group') {\n        continue;\n      }\n\n      let bundleGroup = resolved.value;\n      let mainBundle = (0, _nullthrows.default)(bundleGraph.getBundlesInBundleGroup(bundleGroup).find(b => {\n        let main = b.getMainEntry();\n        return main && bundleGroup.entryAssetId === main.id;\n      }));\n\n      if (mainBundle.isInline) {\n        assets.push({\n          filePath: _path.default.join(__dirname, `/bundles/${mainBundle.id}.js`),\n          code: `module.exports = ${JSON.stringify(dependency.id)};`,\n          dependency\n        });\n        continue;\n      } // URL dependency or not, fall back to including a runtime that exports the url\n\n\n      assets.push(getURLRuntime(dependency, bundle, mainBundle));\n    }\n\n    if (shouldUseRuntimeManifest(bundle) && bundleGraph.getChildBundles(bundle).length > 0 && isNewContext(bundle, bundleGraph)) {\n      assets.push({\n        filePath: __filename,\n        code: getRegisterCode(bundle, bundleGraph),\n        isEntry: true\n      });\n    }\n\n    return assets;\n  }\n\n});\n\nexports.default = _default;\n\nfunction getLoaderRuntimes({\n  bundle,\n  dependency,\n  bundleGroup,\n  bundleGraph\n}) {\n  let assets = []; // Sort so the bundles containing the entry asset appear last\n\n  let externalBundles = bundleGraph.getBundlesInBundleGroup(bundleGroup).filter(bundle => !bundle.isInline).sort(bundle => bundle.getEntryAssets().map(asset => asset.id).includes(bundleGroup.entryAssetId) ? 1 : -1); // CommonJS is a synchronous module system, so there is no need to load bundles in parallel.\n  // Importing of the other bundles will be handled by the bundle group entry.\n  // Do the same thing in library mode for ES modules, as we are building for another bundler\n  // and the imports for sibling bundles will be in the target bundle.\n\n  if (bundle.env.outputFormat === 'commonjs' || bundle.env.isLibrary) {\n    externalBundles = externalBundles.slice(-1);\n  }\n\n  let loaders = getLoaders(bundle.env); // Determine if we need to add a dynamic import() polyfill, or if all target browsers support it natively.\n\n  let needsDynamicImportPolyfill = false;\n\n  if (bundle.env.isBrowser() && bundle.env.outputFormat === 'esmodule') {\n    needsDynamicImportPolyfill = !bundle.env.matchesEngines(DYNAMIC_IMPORT_BROWSERS);\n  }\n\n  let loaderModules = loaders ? externalBundles.map(to => {\n    let loader = loaders[to.type];\n\n    if (!loader) {\n      return;\n    }\n\n    let relativePathExpr = getRelativePathExpr(bundle, to); // Use esmodule loader if possible\n\n    if (to.type === 'js' && to.env.outputFormat === 'esmodule') {\n      if (!needsDynamicImportPolyfill) {\n        return `import(\"./\" + ${relativePathExpr})`;\n      }\n\n      loader = (0, _nullthrows.default)(loaders.IMPORT_POLYFILL, `No import() polyfill available for context '${bundle.env.context}'`);\n    } else if (to.type === 'js' && to.env.outputFormat === 'commonjs') {\n      return `Promise.resolve(require(\"./\" + ${relativePathExpr}))`;\n    }\n\n    return `require(${JSON.stringify(loader)})(require('./bundle-url').getBundleURL() + ${relativePathExpr})`;\n  }).filter(Boolean) : [];\n\n  if (loaderModules.length > 0) {\n    let loaders = loaderModules.join(', ');\n\n    if (loaderModules.length > 1 && (bundle.env.outputFormat === 'global' || !externalBundles.every(b => b.type === 'js'))) {\n      loaders = `Promise.all([${loaders}])`;\n\n      if (bundle.env.outputFormat !== 'global') {\n        loaders += `.then(r => r[r.length - 1])`;\n      }\n    } else {\n      loaders = `(${loaders})`;\n    }\n\n    if (bundle.env.outputFormat === 'global') {\n      loaders += `.then(() => parcelRequire('${bundleGroup.entryAssetId}')${// In global output with scope hoisting, functions return exports are\n      // always returned. Otherwise, the exports are returned.\n      bundle.env.scopeHoist ? '()' : ''})`;\n    }\n\n    assets.push({\n      filePath: __filename,\n      code: `module.exports = ${loaders};`,\n      dependency\n    });\n  }\n\n  return assets;\n}\n\nfunction isNewContext(bundle, bundleGraph) {\n  return bundle.isEntry || bundleGraph.getParentBundles(bundle).some(parent => parent.env.context !== bundle.env.context || parent.type !== 'js');\n}\n\nfunction getURLRuntime(dependency, from, to) {\n  let relativePathExpr = getRelativePathExpr(from, to);\n\n  if (dependency.meta.webworker === true) {\n    return {\n      filePath: __filename,\n      code: `module.exports = require('./get-worker-url')(${relativePathExpr});`,\n      dependency\n    };\n  }\n\n  return {\n    filePath: __filename,\n    code: `module.exports = require('./bundle-url').getBundleURL() + ${relativePathExpr}`,\n    dependency\n  };\n}\n\nfunction getRegisterCode(entryBundle, bundleGraph) {\n  let idToName = {};\n  bundleGraph.traverseBundles((bundle, _, actions) => {\n    if (bundle.isInline) {\n      return;\n    }\n\n    idToName[getPublicBundleId(bundle)] = (0, _nullthrows.default)(bundle.name);\n\n    if (bundle !== entryBundle && isNewContext(bundle, bundleGraph)) {\n      // New contexts have their own manifests, so there's no need to continue.\n      actions.skipChildren();\n    }\n  }, entryBundle);\n  return \"require('./bundle-manifest').register(JSON.parse(\" + JSON.stringify(JSON.stringify(idToName)) + '));';\n}\n\nfunction getRelativePathExpr(from, to) {\n  if (shouldUseRuntimeManifest(from)) {\n    return `require('./relative-path')(${JSON.stringify(getPublicBundleId(from))}, ${JSON.stringify(getPublicBundleId(to))})`;\n  }\n\n  return JSON.stringify((0, _utils.relativeBundlePath)(from, to, {\n    leadingDotSlash: false\n  }));\n}\n\nfunction shouldUseRuntimeManifest(bundle) {\n  let env = bundle.env;\n  return !env.isLibrary && env.outputFormat === 'global' && env.isBrowser();\n}\n\nfunction getPublicBundleId(bundle) {\n  return bundle.id.slice(-16);\n}","abstract class CustomElement extends HTMLElement{\n\n  constructor(public domContent: string){\n    super();\n    this.bindDomContent();\n  }\n\n  bindDomContent = () => {\n    const contentTemplate = document.createElement(\"template\");\n    contentTemplate.innerHTML = this.domContent;\n    const shadowRoot = this.attachShadow({mode: \"open\"});\n    shadowRoot.appendChild(contentTemplate.content.cloneNode(true));\n  }\n\n}\n\nexport { CustomElement };","export enum AppEvents{\n  ActiveComponentChange = \"active-component-change\",\n  LandingBannerShown = \"landing-banner-shown\"\n}\n\nexport enum AppAttributes{\n  ComponentId = \"componentid\",\n  ActiveCrumb = \"activecrumb\"\n}\n\nexport enum AppComponentName{\n  LandingBanner = \"LandingBanner\",\n  StreamLengthForm = \"StreamLengthForm\",\n  StreamBitForm = \"StreamBitForm\",\n  EncoderScreen = \"EncoderScreen\"\n}",null,"import { CustomElement } from '../CustomElement/CustomElement';\nimport { appWrapperContent } from \"./appWrapperContent\";\nimport { AppComponentName, AppEvents, AppAttributes } from '../common/appConstants';\n\nclass AppWrapper extends CustomElement{\n\n  private activeComponentID: AppComponentName = AppComponentName.LandingBanner;\n  private breadCrumb: Element | null = null;\n  private componentMap: { [key: string]: Element } = {};\n\n  constructor() {\n    super(appWrapperContent);\n    this.bindListeners();\n  }\n\n  bindListeners = (): void => {\n    this.addEventListener(AppEvents.ActiveComponentChange,((event: CustomEvent)=>{\n      const targetComponentID = event.detail[AppAttributes.ComponentId];\n      this.setActiveComponent(targetComponentID);\n    }) as EventListener);\n    this.addEventListener(AppEvents.LandingBannerShown,((event)=>{\n      this?.breadCrumb?.removeAttribute(\"isHidden\");\n      this?.breadCrumb?.setAttribute(AppAttributes.ActiveCrumb,this.activeComponentID);\n    }) as EventListener)\n  }\n\n  connectedCallback() {\n    this.createComponentMap();\n  }\n\n  createComponentMap = () => {\n    const componentSlot = this.shadowRoot?.getElementById(\"component-slot\") as HTMLSlotElement;\n    const breadCrumbSlot = this.shadowRoot?.getElementById(\"bread-crumb-slot\") as HTMLSlotElement;\n    const appComponents = componentSlot.assignedElements({flatten: true});\n    this.breadCrumb = breadCrumbSlot.assignedElements({flatten: true})[0];\n    let componentIndex = 0;\n    \n    for (const componentID in AppComponentName) {\n      const currentComponent = appComponents[componentIndex];\n      currentComponent.setAttribute(AppAttributes.ComponentId,componentID);\n      if(this.activeComponentID === componentID){\n        currentComponent.setAttribute(\"active\",\"true\");\n      }\n      this.componentMap[componentID] = currentComponent;\n      componentIndex++;\n    }\n\n  }\n\n  setActiveComponent = (componentID: AppComponentName) => {\n    const oldActiveComponent = this.componentMap[this.activeComponentID];\n    oldActiveComponent.removeAttribute(\"active\");\n    const newActiveComponent = this.componentMap[componentID];\n    newActiveComponent.setAttribute(\"active\",\"true\");\n    this?.breadCrumb?.setAttribute(AppAttributes.ActiveCrumb, componentID);\n    this.activeComponentID = componentID;\n  }\n}\n\nexport { AppWrapper }",null,null,null],"names":["$parcel$interopDefault","a","__esModule","default","mapping","pairs","keys","Object","i","length","$c2c7fbc8b68410859ec0d9fc415444c7$export$register","JSON","parse","CustomElement","domContent","_this","$c3bc0fbec81c0a2ca2f2677d7066ba41$var$_classCallCheck","this","_super","call","$c3bc0fbec81c0a2ca2f2677d7066ba41$var$_assertThisInitialized","contentTemplate","document","createElement","innerHTML","attachShadow","mode","appendChild","content","cloneNode","bindDomContent","HTMLElement","AppEvents","AppAttributes","AppComponentName","AppWrapper","$d332527a228a3dbfd3b615532$var$_classCallCheck","$d332527a228a3dbfd3b615532$var$_defineProperty","$d332527a228a3dbfd3b615532$var$_assertThisInitialized","$c0e232a5080d017b6169bb90c74$export$appWrapperContent","$e62f65a8fb982ccc5ea909f4a3013df$export$AppComponentName","LandingBanner","addEventListener","$e62f65a8fb982ccc5ea909f4a3013df$export$AppEvents","ActiveComponentChange","event","targetComponentID","detail","$e62f65a8fb982ccc5ea909f4a3013df$export$AppAttributes","ComponentId","setActiveComponent","LandingBannerShown","_assertThisInitialize","_assertThisInitialize2","_assertThisInitialize3","_assertThisInitialize4","breadCrumb","removeAttribute","setAttribute","ActiveCrumb","activeComponentID","_this$shadowRoot","_this$shadowRoot2","componentSlot","shadowRoot","getElementById","breadCrumbSlot","appComponents","assignedElements","flatten","componentIndex","componentID","currentComponent","componentMap","_assertThisInitialize5","_assertThisInitialize6","bindListeners","createComponentMap"],"version":3,"file":"ts.7144c0ac.js.map"}